[["/home/project/src/App.tsx","import React, { useState, useCallback } from 'react';\nimport { Upload, FileUp } from 'lucide-react';\nimport FileUpload from './components/FileUpload';\nimport FieldMatcher from './components/FieldMatcher';\nimport ContactPreview from './components/ContactPreview';\nimport { parseVCard, mergeContacts, exportVCard, exportCSV } from './utils/vCardUtils';\nimport { Contact, ParsedFile } from './types';\n\nexport default function App() {\n  const [files, setFiles] = useState<ParsedFile[]>([]);\n  const [mergedContacts, setMergedContacts] = useState<Contact[]>([]);\n  const [fieldMappings, setFieldMappings] = useState<Record<string, string>>({});\n  const [error, setError] = useState<string | null>(null);\n  const [matchStats, setMatchStats] = useState<{ total: number; autoMatched: number } | null>(null);\n  const [selectedContacts, setSelectedContacts] = useState<Set<number>>(new Set());\n\n  const handleFileUpload = useCallback(async (uploadedFiles: FileList) => {\n    try {\n      const parsedFiles = await Promise.all(\n        Array.from(uploadedFiles).map(async (file) => ({\n          name: file.name,\n          contacts: await parseVCard(file),\n        }))\n      );\n      setFiles(parsedFiles);\n      setMergedContacts([]);\n      setMatchStats(null);\n      setError(null);\n      setSelectedContacts(new Set());\n    } catch (err) {\n      setError('Error parsing vCard files. Please check the file format and try again.');\n      console.error(err);\n    }\n  }, []);\n\n  const handleMerge = useCallback(() => {\n    if (files.length !== 2) return;\n    try {\n      const merged = mergeContacts(files[0].contacts, files[1].contacts, fieldMappings);\n      setMergedContacts(merged);\n      setSelectedContacts(new Set(merged.map((_, index) => index)));\n      setMatchStats({\n        total: merged.length,\n        autoMatched: merged.length - (files[0].contacts.length + files[1].contacts.length - merged.length)\n      });\n      setError(null);\n    } catch (err) {\n      setError('Error merging contacts. Please check your field mappings and try again.');\n      console.error(err);\n    }\n  }, [files, fieldMappings]);\n\n  const handleExport = useCallback((format: 'vcard' | 'csv') => {\n    try {\n      const selectedMergedContacts = mergedContacts.filter((_, index) => selectedContacts.has(index));\n      if (format === 'vcard') {\n        exportVCard(selectedMergedContacts);\n      } else {\n        exportCSV(selectedMergedContacts);\n      }\n      setError(null);\n    } catch (err) {\n      setError(`Error exporting as ${format.toUpperCase()}. Please try again.`);\n      console.error(err);\n    }\n  }, [mergedContacts, selectedContacts]);\n\n  const resetFiles = useCallback(() => {\n    setFiles([]);\n    setMergedContacts([]);\n    setFieldMappings({});\n    setMatchStats(null);\n    setSelectedContacts(new Set());\n  }, []);\n\n  const handleSelectionChange = useCallback((index: number, isSelected: boolean) => {\n    setSelectedContacts(prev => {\n      const newSet = new Set(prev);\n      if (isSelected) {\n        newSet.add(index);\n      } else {\n        newSet.delete(index);\n      }\n      return newSet;\n    });\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12\">\n      <div className=\"relative py-3 sm:mx-auto sm:max-w-5xl w-full px-4\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-light-blue-500 shadow-lg transform -skew-y-6 sm:skew-y-0 sm:-rotate-6 sm:rounded-3xl\"></div>\n        <div className=\"relative px-4 py-10 bg-white shadow-lg sm:rounded-3xl sm:p-20\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div>\n              <h1 className=\"text-4xl font-semibold text-center mb-8\">vCard Merger</h1>\n            </div>\n            {error && (\n              <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\" role=\"alert\">\n                <strong className=\"font-bold\">Error: </strong>\n                <span className=\"block sm:inline\">{error}</span>\n              </div>\n            )}\n            {matchStats && (\n              <div className=\"bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4\">\n                <strong className=\"font-bold\">Merge complete: </strong>\n                <span className=\"block sm:inline\">\n                  {matchStats.autoMatched} contacts automatically matched out of {matchStats.total} total contacts.\n                </span>\n              </div>\n            )}\n            <div className=\"space-y-8\">\n              {files.length === 2 ? (\n                <button\n                  onClick={resetFiles}\n                  className=\"w-full flex justify-center items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n                >\n                  <Upload className=\"mr-2 h-5 w-5\" />\n                  Upload Different Files\n                </button>\n              ) : (\n                <FileUpload onUpload={handleFileUpload} />\n              )}\n              {files.length === 2 && (\n                <FieldMatcher\n                  files={files}\n                  onMappingChange={setFieldMappings}\n                  onMerge={handleMerge}\n                />\n              )}\n              {mergedContacts.length > 0 && (\n                <>\n                  <ContactPreview \n                    contacts={mergedContacts} \n                    selectedContacts={selectedContacts}\n                    onSelectionChange={handleSelectionChange}\n                  />\n                  <div className=\"flex justify-center space-x-4\">\n                    <button\n                      onClick={() => handleExport('vcard')}\n                      className=\"px-6 py-2 bg-cyan-600 text-white rounded-md hover:bg-cyan-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500\"\n                    >\n                      Export as vCard\n                    </button>\n                    <button\n                      onClick={() => handleExport('csv')}\n                      className=\"px-6 py-2 bg-cyan-600 text-white rounded-md hover:bg-cyan-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500\"\n                    >\n                      Export as CSV\n                    </button>\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"],["/home/project/src/components/ContactPreview.tsx","import React, { useState } from 'react';\nimport { Contact } from '../types';\n\ninterface ContactPreviewProps {\n  contacts: Contact[];\n  selectedContacts: Set<number>;\n  onSelectionChange: (index: number, isSelected: boolean) => void;\n}\n\nconst ContactPreview: React.FC<ContactPreviewProps> = ({ contacts, selectedContacts, onSelectionChange }) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const contactsPerPage = 10;\n\n  const indexOfLastContact = currentPage * contactsPerPage;\n  const indexOfFirstContact = indexOfLastContact - contactsPerPage;\n  const currentContacts = contacts.slice(indexOfFirstContact, indexOfLastContact);\n\n  const totalPages = Math.ceil(contacts.length / contactsPerPage);\n\n  const mandatoryFields = ['BEGIN', 'END', 'VERSION'];\n\n  if (contacts.length === 0) {\n    return null;\n  }\n\n  const renderValue = (value: any): string => {\n    if (Array.isArray(value)) {\n      return value.map(v => renderValue(v)).join(', ');\n    } else if (typeof value === 'object' && value !== null) {\n      if ('value' in value) {\n        return Array.isArray(value.value) ? value.value.join(', ') : String(value.value);\n      } else {\n        return JSON.stringify(value);\n      }\n    } else {\n      return String(value);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-medium text-gray-900\">Merged Contacts Preview</h2>\n      <p className=\"text-base text-gray-500\">\n        Showing {indexOfFirstContact + 1}-{Math.min(indexOfLastContact, contacts.length)} of {contacts.length} contacts\n      </p>\n      <div className=\"space-y-4\">\n        {currentContacts.map((contact, index) => {\n          const globalIndex = indexOfFirstContact + index;\n          return (\n            <div key={globalIndex} className=\"border rounded-md p-4 bg-gray-50\">\n              <div className=\"flex items-center mb-2\">\n                <input\n                  type=\"checkbox\"\n                  id={`contact-${globalIndex}`}\n                  checked={selectedContacts.has(globalIndex)}\n                  onChange={(e) => onSelectionChange(globalIndex, e.target.checked)}\n                  className=\"mr-2 h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n                />\n                <label htmlFor={`contact-${globalIndex}`} className=\"font-medium text-gray-700\">\n                  Include in export\n                </label>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                {Object.entries(contact).map(([key, value]) => {\n                  if (mandatoryFields.includes(key)) return null;\n                  return (\n                    <div key={key} className=\"flex\">\n                      <span className=\"font-medium w-1/2\">{key}:</span>\n                      <span className=\"w-1/2\">{renderValue(value)}</span>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"flex justify-between items-center\">\n        <button\n          onClick={() => setCurrentPage(currentPage - 1)}\n          disabled={currentPage === 1}\n          className=\"px-4 py-2 border rounded-md disabled:opacity-50 bg-white hover:bg-gray-50\"\n        >\n          Previous\n        </button>\n        <span>\n          Page {currentPage} of {totalPages}\n        </span>\n        <button\n          onClick={() => setCurrentPage(currentPage + 1)}\n          disabled={currentPage === totalPages}\n          className=\"px-4 py-2 border rounded-md disabled:opacity-50 bg-white hover:bg-gray-50\"\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ContactPreview;"]]